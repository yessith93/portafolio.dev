---
import ThemeToggle from "./ThemeToggle.astro"
import Mail from "./icons/Mail.astro"
// import { getRelativeLocaleUrl } from 'astro:i18n';

const info = {...Astro.props.info}
const navItems = info.navItems
---

<header
  class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2"
>
  <nav
    class="flex px-3 text-xs flex-wrap font-medium rounded-full text-gray-600 dark:text-gray-200 justify-center items-center md:text-sm"
  >
    {
      navItems.map((link:any) => (
          <a
            class="relative px-2 py-2 w-max transition hover:text-yellow-500 dark:hover:text-yellow-400 block"
            aria-label={link.label}
            href={link.url}
          >
            {link.title}
          </a>
      ))
    }
    <a
    class="relative px-2 py-2 w-max transition hover:text-yellow-500 dark:hover:text-yellow-400 md:block hidden"
    aria-label={info.mail.label}
    href={info.mail.url}
  >
    {info.mail.title}
  </a>
    <a
    class="relative block md:hidden px-2 py-2 w-max transition hover:text-yellow-500 dark:hover:text-yellow-400 "
    aria-label={navItems[navItems.length-1].label}
    href={info.mail.url}
  >
    <Mail class="size-5 transition-all"/>
  </a>
    <ThemeToggle />
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section")
    const navItems = document.querySelectorAll("header nav a")

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-yellow-500")
            } else {
              item.classList.remove("text-yellow-500")
            }
          })
        }
      })
    }

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    })

    sections.forEach((section) => {
      observer.observe(section)
    })

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect()
      } else {
        sections.forEach((section) => {
          observer.observe(section)
        })
      }
    }
  })
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  @keyframes nav-shadown {
    to {
      @apply shadow-lg ring-1 backdrop-blur dark:bg-gray-800/90 bg-white/50 ring-white/10;
    }
  }
</style>
